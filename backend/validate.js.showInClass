const MAX_NAME_LEN = 50;
const MAX_URL_LEN = 2048;
const MAX_LINK_ALIVE_WAIT = 5000; // msec
const urlShorteners = require("./util/url.shorteners.list.js");

function _checkIfEmpty(s){
	return s === undefined || s === null || !s.toString().trim().length;
}

/**
  * 
  * @param {String} name 
  */
function validateAuthorName(name){
	// if empty, null, undefined
	if(_checkIfEmpty(name)){
		throw "Author name can't be empty";
	}
	name = name.toString().trim();
	// max length is sane
	if(name.length > MAX_NAME_LEN){
		throw new Error("Author name is unrealistically long");
	}
	// non-alphabet characters
	const nonAlphaCharRegexp = /[^a-z\-\u00C0-\u017F ]/ui;
	if(nonAlphaCharRegexp.test(name)){
		throw "Athor name can't contain non-alphabet characters";
	}
	// at least two words (full name)
	const nameParts = name.split(" ").filter(x=>x.length);
	if(nameParts.length < 2){
		throw new Error("Author name needs to be a full name");
	}
	// no abbreviations
	if(nameParts.some(s=>(s).replaceAll(".", "").length < 2)){
		throw "Author name can't contain abbreviations";
	}
	// no camelCase
	return nameParts.map(s=>s.charAt(0).toUpperCase()+s.substr(1).toLowerCase()).join(" ");
}


function checkLinkAlive(url, fetchF = fetch) {
	return Promise
		.race([
			fetchF(url),
			new Promise((_, reject) => setTimeout(
				()=>reject(new Error("Timed out.")),
				MAX_LINK_ALIVE_WAIT
			))
		])
		.then(resp=>{
			if(!resp.ok){
				console.log("Result for ", url, resp.status, resp.statusText);
				return Promise.reject("Link not alive.");
			}
		});
}


// Checks if a link is a valid HTTP/S URL
function validateURL(link) {
	if (_checkIfEmpty(link)) {
		throw "Advertiser link can't be empty";
	}
	link = link.toString().trim(); // accounting for non-string data being passed in
	// check max length
	if (link.length > MAX_URL_LEN) {
		throw "Advertiser link is too long";
	}
	// only http/s allowed
	if (link.indexOf("http") !== 0) {
		throw "Advertiser link: only http/s links are allowed";
	}
	// check if valid URL
	try {
		var url = new URL(link);
	} catch (e) {
		// catching to replace errors with our own messages
		throw "Advertiser link should be a valid URL.";
	}
	// no link shorteners
	if (urlShorteners.some(shortUrl => shortUrl === url.hostname)) {
		throw "Advertiser link: URL shorteners not allowed. Go away spammer!";
	}
	return url;
}

module.exports = {
	checkLinkAlive,
	validateAuthorName,
	validateURL
};


